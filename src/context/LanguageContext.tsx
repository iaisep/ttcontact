import React, { createContext, useContext, useState } from 'react';

// Define and export the Language type
export type Language = 'en' | 'es';

type LanguageContextType = {
  language: Language;
  setLanguage: (lang: Language) => void;
  t: (key: string) => string;
};

const initialContext: LanguageContextType = {
  language: 'es',
  setLanguage: () => {},
  t: (key) => key,
};

const translations: Record<Language, Record<string, string>> = {
  en: {
    name: 'Name',
    description: 'Description',
    agent_type: 'Agent Type',
    voice_id: 'Voice ID',
    folder: 'Folder',
    name_required: 'Name is required',
    description_required: 'Description is required',
    voice_id_required: 'Voice ID is required',
    cancel: 'Cancel',
    update_agent: 'Update Agent',
    agent_name_placeholder: 'Enter agent name',
    agent_description_placeholder: 'Enter agent description',
    no_folder: 'No folder',
    edit_agent: 'Edit Agent',
    back_to_dashboard: 'Back to Dashboard',
    loading: 'Loading...',
    agent_not_found: 'Agent not found',
    error_loading_agent: 'Error loading agent data',
    error_updating_agent: 'Error updating agent',
    agent_updated: 'Agent updated successfully',
    llm: 'LLM',
    voice: 'Voice',
    language: 'Language',
    selected_voice: 'Selected Voice',
    functions: 'Functions',
    call_settings: 'Call Settings',
    webhook_settings: 'Webhook Settings',
    audio_settings: 'Audio Settings',
    volume: 'Volume',
    listening: 'Listening...',
    test_your_agent: 'Test your agent',
    speak_now: 'Speak now',
    test: 'Test',
    audio: 'Audio',
    end_the_call: 'End the call',
    testing_audio: 'Testing audio...',
    audio_test_complete: 'Audio test complete!',
    testing_llm: 'Testing LLM...',
    llm_test_complete: 'LLM test complete!',
    testing_code: 'Testing code...',
    code_test_complete: 'Code test complete!',
    processing_test: 'Processing test...',
    test_complete: 'Test complete!',
    call_connected: 'Call connected!',
    error_testing_audio: 'Error testing audio',
    error_testing_llm: 'Error testing LLM',
    error_starting_call: 'Error starting call',
    no_agents_found: 'No agents found',
    actions: 'Actions',
    error_fetching_functions: 'Error fetching functions',
    functions_updated_successfully: 'Functions updated successfully',
    error_updating_functions: 'Error updating functions',
    function_name_already_exists: 'A function with this name already exists',
    choose_language: 'Choose language',
    english: 'English',
    spanish: 'Spanish',
    select_language: 'Select language',
    products: 'Products',
    documentation: 'Documentation',
    resources: 'Resources',
    pricing: 'Pricing',
    features: 'Features',
    discover_features: 'Discover our features',
    voice_sdk: 'Voice SDK',
    voice_sdk_desc: 'Integrate voice capabilities into your app',
    ai_agents: 'AI Agents',
    ai_agents_desc: 'Build powerful AI agents for your business',
    blog: 'Blog',
    blog_desc: 'Latest updates and articles',
    guides: 'Guides',
    guides_desc: 'Step-by-step tutorials',
    examples: 'Examples',
    examples_desc: 'See our solutions in action',
    login: 'Login',
    get_started: 'Get Started',
    voice_agent_hub: 'Voice Agent Hub',
    all_agents: 'All Agents',
    create_an_agent: 'Create an Agent',
    search_agents: 'Search agents...',
    import: 'Import',
    confirm_delete_agent: 'Are you sure you want to delete this agent?',
    agent_deleted: 'Agent deleted successfully',
    error_deleting_agent: 'Error deleting agent',
    error_loading_agents: 'Error loading agents',
    import_feature_coming_soon: 'Import feature coming soon',
    agent_name: 'Agent Name',
    agent_type: 'Agent Type',
    voice: 'Voice',
    phone: 'Phone',
    edited_by: 'Edited by',
    single_prompt: 'Single Prompt',
    multi_prompt: 'Multi Prompt',
    voice_agent_hub: 'Voice Agent Hub'
  },
  es: {
    name: 'Nombre',
    description: 'Descripción',
    agent_type: 'Tipo de Agente',
    voice_id: 'ID de Voz',
    folder: 'Carpeta',
    name_required: 'El nombre es obligatorio',
    description_required: 'La descripción es obligatoria',
    voice_id_required: 'El ID de voz es obligatorio',
    cancel: 'Cancelar',
    update_agent: 'Actualizar Agente',
    agent_name_placeholder: 'Ingrese nombre del agente',
    agent_description_placeholder: 'Ingrese descripción del agente',
    no_folder: 'Sin carpeta',
    edit_agent: 'Editar Agente',
    back_to_dashboard: 'Volver al Dashboard',
    loading: 'Cargando...',
    agent_not_found: 'Agente no encontrado',
    error_loading_agent: 'Error al cargar datos del agente',
    error_updating_agent: 'Error al actualizar el agente',
    agent_updated: 'Agente actualizado exitosamente',
    llm: 'LLM',
    voice: 'Voz',
    language: 'Idioma',
    selected_voice: 'Voz Seleccionada',
    functions: 'Funciones',
    call_settings: 'Configuración de Llamada',
    webhook_settings: 'Configuración de Webhook',
    audio_settings: 'Configuración de Audio',
    volume: 'Volumen',
    listening: 'Escuchando...',
    test_your_agent: 'Prueba tu agente',
    speak_now: 'Habla ahora',
    test: 'Probar',
    audio: 'Audio',
    end_the_call: 'Terminar la llamada',
    testing_audio: 'Probando audio...',
    audio_test_complete: '¡Prueba de audio completada!',
    testing_llm: 'Probando LLM...',
    llm_test_complete: '¡Prueba de LLM completada!',
    testing_code: 'Probando código...',
    code_test_complete: '¡Prueba de código completada!',
    processing_test: 'Procesando prueba...',
    test_complete: '¡Prueba completada!',
    call_connected: '¡Llamada conectada!',
    error_testing_audio: 'Error al probar el audio',
    error_testing_llm: 'Error al probar el LLM',
    error_starting_call: 'Error al iniciar la llamada',
    no_agents_found: 'No se encontraron agentes',
    actions: 'Acciones',
    error_fetching_functions: 'Error al obtener las funciones',
    functions_updated_successfully: 'Funciones actualizadas exitosamente',
    error_updating_functions: 'Error al actualizar las funciones',
    function_name_already_exists: 'Ya existe una función con este nombre',
    choose_language: 'Elegir idioma',
    english: 'Inglés',
    spanish: 'Español',
    select_language: 'Seleccionar idioma',
    products: 'Productos',
    documentation: 'Documentación',
    resources: 'Recursos',
    pricing: 'Precios',
    features: 'Características',
    discover_features: 'Descubre nuestras características',
    voice_sdk: 'SDK de Voz',
    voice_sdk_desc: 'Integra capacidades de voz en tu aplicación',
    ai_agents: 'Agentes de IA',
    ai_agents_desc: 'Construye agentes de IA potentes para tu negocio',
    blog: 'Blog',
    blog_desc: 'Últimas actualizaciones y artículos',
    guides: 'Guías',
    guides_desc: 'Tutoriales paso a paso',
    examples: 'Ejemplos',
    examples_desc: 'Ve nuestras soluciones en acción',
    login: 'Iniciar sesión',
    get_started: 'Comenzar',
    voice_agent_hub: 'Portal de Agentes de Voz',
    all_agents: 'Todos los Agentes',
    create_an_agent: 'Crear Agente',
    search_agents: 'Buscar agentes...',
    import: 'Importar',
    confirm_delete_agent: '¿Estás seguro de que quieres eliminar este agente?',
    agent_deleted: 'Agente eliminado exitosamente',
    error_deleting_agent: 'Error al eliminar el agente',
    error_loading_agents: 'Error al cargar los agentes',
    import_feature_coming_soon: 'Función de importación próximamente',
    agent_name: 'Nombre del Agente',
    agent_type: 'Tipo de Agente',
    voice: 'Voz',
    phone: 'Teléfono',
    edited_by: 'Editado por',
    single_prompt: 'Prompt Único',
    multi_prompt: 'Prompt Múltiple',
    voice_agent_hub: 'Portal de Agentes de Voz'
  },
};

export const LanguageContext = createContext<LanguageContextType>(initialContext);

export const useLanguage = (): LanguageContextType => {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};

export const LanguageProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [language, setLanguage] = useState<Language>('es');

  const t = (key: string): string => {
    return translations[language]?.[key] || key;
  };

  return (
    <LanguageContext.Provider value={{ language, setLanguage, t }}>
      {children}
    </LanguageContext.Provider>
  );
};

export default LanguageProvider;

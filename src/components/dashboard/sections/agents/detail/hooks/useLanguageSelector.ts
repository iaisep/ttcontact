
import { useState } from 'react';

interface UseLanguageSelectorProps {
  initialLanguage: string;
  updateAgentField: (fieldName: string, value: any) => void;
}

export const useLanguageSelector = ({ initialLanguage, updateAgentField }: UseLanguageSelectorProps) => {
  const [selectedLanguage, setSelectedLanguage] = useState(initialLanguage);

  // Language options with icons
  const languageOptions = [
    { value: 'English', label: 'English', icon: 'ğŸ‡ºğŸ‡¸' },
    { value: 'Spanish', label: 'Spanish', icon: 'ğŸ‡ªğŸ‡¸' },
    { value: 'French', label: 'French', icon: 'ğŸ‡«ğŸ‡·' },
    { value: 'German', label: 'German', icon: 'ğŸ‡©ğŸ‡ª' },
    { value: 'Italian', label: 'Italian', icon: 'ğŸ‡®ğŸ‡¹' },
    { value: 'Portuguese', label: 'Portuguese', icon: 'ğŸ‡µğŸ‡¹' },
    { value: 'Dutch', label: 'Dutch', icon: 'ğŸ‡³ğŸ‡±' },
    { value: 'Chinese', label: 'Chinese', icon: 'ğŸ‡¨ğŸ‡³' },
    { value: 'Japanese', label: 'Japanese', icon: 'ğŸ‡¯ğŸ‡µ' },
    { value: 'Korean', label: 'Korean', icon: 'ğŸ‡°ğŸ‡·' },
    { value: 'Arabic', label: 'Arabic', icon: 'ğŸ‡¸ğŸ‡¦' },
    { value: 'Russian', label: 'Russian', icon: 'ğŸ‡·ğŸ‡º' },
    { value: 'Hindi', label: 'Hindi', icon: 'ğŸ‡®ğŸ‡³' }
  ];

  // Handle language change as async to align with expected type
  const handleLanguageChange = async (language: string): Promise<void> => {
    setSelectedLanguage(language);
    await updateAgentField('language', language);
    return Promise.resolve();
  };

  return {
    selectedLanguage,
    languageOptions,
    handleLanguageChange
  };
};
